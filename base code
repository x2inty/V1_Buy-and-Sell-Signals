import pandas as pd
import numpy as np
import ta
import requests
from datetime import datetime

# 1. Load BTC/USDT data from Binance
def fetch_binance_data():
    url = 'https://api.binance.com/api/v3/klines'
    params = {
        'symbol': 'BTCUSDT',
        'interval': '1d',
        'limit': 1000
    }
    response = requests.get(url, params=params)
    data = response.json()

    df = pd.DataFrame(data, columns=[
        'Open time', 'Open', 'High', 'Low', 'Close', 'Volume',
        'Close time', 'Quote asset volume', 'Number of trades',
        'Taker buy base asset volume', 'Taker buy quote asset volume', 'Ignore'
    ])

    df['DateTime'] = pd.to_datetime(df['Open time'], unit='ms')
    df['BTC'] = df['Close'].astype(float)
    return df[['DateTime', 'BTC']]

# Load data
data = fetch_binance_data()

# 2. Calculate basic indicators
data['SMA_7'] = data['BTC'].rolling(7).mean()
data['SMA_14'] = data['BTC'].rolling(14).mean()
data['14_day_change'] = data['BTC'].pct_change(14) * 100
data['Volatility_14'] = data['BTC'].rolling(14).std()

# 3. Volatility classification
vol_mean = data['Volatility_14'].mean()
data['Volatility_Category'] = np.select(
    [
        data['Volatility_14'] < vol_mean * 0.7,
        data['Volatility_14'] > vol_mean * 1.3,
        (data['Volatility_14'] >= vol_mean * 0.7) & 
        (data['Volatility_14'] <= vol_mean * 1.3)
    ],
    ['Stable', 'Volatile', 'Trending'],
    default='Unknown'
)

# 4. Trend detection with confirmation
data['SMA_Trend'] = np.where(data['SMA_7'] > data['SMA_14'], 'Bullish', 'Bearish')
data['Trend_Confirmed'] = data.groupby((data['SMA_Trend'] != data['SMA_Trend'].shift()).cumsum())['SMA_Trend'].transform('count') >= 3

# 5. Signal generation
def generate_signals(row):
    if not row['Trend_Confirmed'] or pd.isna(row['14_day_change']):
        return 'Neutral'

    # Sell signals
    if row['SMA_Trend'] == 'Bearish':
        if row['Volatility_Category'] == 'Volatile':
            if row['14_day_change'] < -0.6: return 'Sell - Volatile (Strong)'
            elif row['14_day_change'] < -0.4: return 'Sell - Volatile (Medium)'
        elif row['Volatility_Category'] == 'Trending' and row['14_day_change'] < -0.5:
            return 'Sell - Trend'
        elif row['Volatility_Category'] == 'Stable' and row['14_day_change'] < -0.3:
            return 'Sell - Stable'

    # Buy signals
    elif row['SMA_Trend'] == 'Bullish':
        if row['Volatility_Category'] == 'Volatile':
            if row['14_day_change'] > 0.6: return 'Buy - Volatile (Strong)'
            elif row['14_day_change'] > 0.4: return 'Buy - Volatile (Medium)'
        elif row['Volatility_Category'] == 'Trending' and row['14_day_change'] > 0.5:
            return 'Buy - Trend'
        elif row['Volatility_Category'] == 'Stable' and row['14_day_change'] > 0.3:
            return 'Buy - Stable'

    return 'Neutral'

data['Signal'] = data.apply(generate_signals, axis=1)

# 6. Filter and print
results = data[data['DateTime'] >= '2025-03-01'].copy()
print(results[['DateTime', 'BTC', 'Volatility_Category', 'SMA_Trend', '14_day_change', 'Signal']].tail(20))
